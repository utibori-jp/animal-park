// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// SampleArray defines model for SampleArray.
type SampleArray = []SampleResponse

// SampleResponse defines model for SampleResponse.
type SampleResponse struct {
	Value *string `json:"value,omitempty"`
}

// SampleParam1 defines model for sampleParam1.
type SampleParam1 = string

// GetSampleParams defines parameters for GetSample.
type GetSampleParams struct {
	Param1 *SampleParam1 `form:"param1,omitempty" json:"param1,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /sample)
	GetSample(c *gin.Context, params GetSampleParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetSample operation middleware
func (siw *ServerInterfaceWrapper) GetSample(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSampleParams

	// ------------- Optional query parameter "param1" -------------

	err = runtime.BindQueryParameter("form", true, false, "param1", c.Request.URL.Query(), &params.Param1)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter param1: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSample(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/sample", wrapper.GetSample)
}

type GetSampleRequestObject struct {
	Params GetSampleParams
}

type GetSampleResponseObject interface {
	VisitGetSampleResponse(w http.ResponseWriter) error
}

type GetSample200JSONResponse SampleArray

func (response GetSample200JSONResponse) VisitGetSampleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSample400Response struct {
}

func (response GetSample400Response) VisitGetSampleResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetSample401Response struct {
}

func (response GetSample401Response) VisitGetSampleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /sample)
	GetSample(ctx context.Context, request GetSampleRequestObject) (GetSampleResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetSample operation middleware
func (sh *strictHandler) GetSample(ctx *gin.Context, params GetSampleParams) {
	var request GetSampleRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSample(ctx, request.(GetSampleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSample")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSampleResponseObject); ok {
		if err := validResponse.VisitGetSampleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4RRPYvbMBj+K+FtR+OPtpO3TqVbacbSQXXeJAq2pEpKIBhDbS+hENqppVOHDk0DvVvv",
	"INyf0SXkZxySkktyFzgvRnrf50PPU0LGC8EZMq0gLUEQSQrUKN1JkULk+M7eJfZMGaTweYxyCgEwUiCk",
	"HpFAACobYkHsmp4KO1FaUjaAqqr2Q0fadaSvpSRTx6mxcPfPJfYhhWfRwVG0g0Ue8x6V4EwhVMFegzia",
	"KoAHG/YpkguUmqJjn5B8jOfM3VPxTyPMtLdLWZ+7ZapzOxtQ1iGCdnwgEMAEpaLcxpGEcRhbB1wgI4JC",
	"Ci/DOLSJCKKHTjza4dISBqjtz1ojmnL2tgcpvEHd3TMfN/DhfCqHleikoepjAHKXgNN9Ecf2l3GmkTld",
	"IkROM6ccjZR9QHlU3NMV+NpcRj1UmaRC+xj82NQX628/1jc/N7Pv66+/bSyvvIfT7dur+eb/H1MvTbs0",
	"zaVpFqa5Nu3M1H9N/ct8aTwyeYzcLufbxcoC2n+mXR0B3HcXAAD//+oR7ETQAgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
