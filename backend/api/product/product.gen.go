// Package product provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package product

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// CheckResponse defines model for CheckResponse.
type CheckResponse = []User

// Product defines model for Product.
type Product struct {
	Availability  *string   `json:"availability,omitempty"`
	ImageUrl      *string   `json:"image_url,omitempty"`
	Price         *int      `json:"price,omitempty"`
	ProductId     *int      `json:"product_id,omitempty"`
	ProductName   *string   `json:"product_name,omitempty"`
	Rating        *float32  `json:"rating,omitempty"`
	StockQuantity *int      `json:"stock_quantity,omitempty"`
	Tags          *[]string `json:"tags,omitempty"`
}

// ProductDetailResponse defines model for ProductDetailResponse.
type ProductDetailResponse struct {
	Availability       *string `json:"availability,omitempty"`
	ImageUrl           *string `json:"image_url,omitempty"`
	Price              *int    `json:"price,omitempty"`
	ProductDescription *string `json:"product_description,omitempty"`
	ProductId          *int    `json:"product_id,omitempty"`
	ProductName        *string `json:"product_name,omitempty"`
	RelatedProducts    *[]int  `json:"related_products,omitempty"`
	Reviews            *[]struct {
		Comment *string  `json:"comment,omitempty"`
		Rating  *float32 `json:"rating,omitempty"`
		User    *string  `json:"user,omitempty"`
	} `json:"reviews,omitempty"`
	StockQuantity *int `json:"stock_quantity,omitempty"`
}

// ProductListResponse defines model for ProductListResponse.
type ProductListResponse struct {
	CategoryId   *int       `json:"category_id,omitempty"`
	CategoryName *string    `json:"category_name,omitempty"`
	Products     *[]Product `json:"products,omitempty"`
}

// User defines model for User.
type User struct {
	Email    *string `json:"email,omitempty"`
	UserId   *int    `json:"user_id,omitempty"`
	UserName *string `json:"user_name,omitempty"`
}

// CategoryId defines model for category_id.
type CategoryId = int

// ProductId defines model for product_id.
type ProductId = int

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Error *string `json:"error,omitempty"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	Error *string `json:"error,omitempty"`
}

// GetProductListParams defines parameters for GetProductList.
type GetProductListParams struct {
	// CategoryId The ID of the category to filter products.
	CategoryId CategoryId `form:"category_id" json:"category_id"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get product list by category
	// (GET /product)
	GetProductList(c *gin.Context, params GetProductListParams)
	// Get product details by product ID
	// (GET /product/{product_id})
	GetProductDetail(c *gin.Context, productId ProductId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetProductList operation middleware
func (siw *ServerInterfaceWrapper) GetProductList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductListParams

	// ------------- Required query parameter "category_id" -------------

	if paramValue := c.Query("category_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument category_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "category_id", c.Request.URL.Query(), &params.CategoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductList(c, params)
}

// GetProductDetail operation middleware
func (siw *ServerInterfaceWrapper) GetProductDetail(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId ProductId

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductDetail(c, productId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/product", wrapper.GetProductList)
	router.GET(options.BaseURL+"/product/:product_id", wrapper.GetProductDetail)
}

type BadRequestJSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type NotFoundJSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type GetProductListRequestObject struct {
	Params GetProductListParams
}

type GetProductListResponseObject interface {
	VisitGetProductListResponse(w http.ResponseWriter) error
}

type GetProductList200JSONResponse ProductListResponse

func (response GetProductList200JSONResponse) VisitGetProductListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProductList400Response struct {
}

func (response GetProductList400Response) VisitGetProductListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetProductList401Response struct {
}

func (response GetProductList401Response) VisitGetProductListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetProductDetailRequestObject struct {
	ProductId ProductId `json:"product_id"`
}

type GetProductDetailResponseObject interface {
	VisitGetProductDetailResponse(w http.ResponseWriter) error
}

type GetProductDetail200JSONResponse ProductDetailResponse

func (response GetProductDetail200JSONResponse) VisitGetProductDetailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProductDetail400Response struct {
}

func (response GetProductDetail400Response) VisitGetProductDetailResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetProductDetail401Response struct {
}

func (response GetProductDetail401Response) VisitGetProductDetailResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get product list by category
	// (GET /product)
	GetProductList(ctx context.Context, request GetProductListRequestObject) (GetProductListResponseObject, error)
	// Get product details by product ID
	// (GET /product/{product_id})
	GetProductDetail(ctx context.Context, request GetProductDetailRequestObject) (GetProductDetailResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetProductList operation middleware
func (sh *strictHandler) GetProductList(ctx *gin.Context, params GetProductListParams) {
	var request GetProductListRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProductList(ctx, request.(GetProductListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProductList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProductListResponseObject); ok {
		if err := validResponse.VisitGetProductListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProductDetail operation middleware
func (sh *strictHandler) GetProductDetail(ctx *gin.Context, productId ProductId) {
	var request GetProductDetailRequestObject

	request.ProductId = productId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProductDetail(ctx, request.(GetProductDetailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProductDetail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProductDetailResponseObject); ok {
		if err := validResponse.VisitGetProductDetailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXwY7cRBD9lU7B0bE9QyIhn9hkIRopRKssOa1Wqx67ZqZ37W5vd3myo5WlSNw58Qmc",
	"kJA48j+AEH+Bum2P7bFn8SKIxG3c0131uupV1et7iFWWK4mSDET3kHPNMyTU7ivmhGuld1cisZ8JmliL",
	"nISSEME3G2SLU6ZWjDbImq2MFFuJlFCzXKukiMn44IGwJ24L1DvwQPIMIepZ90DjbSE0JhCRLtADE28w",
	"49Yt3vEsTxGimQe0y+1RIQnXqKEsPajdTMBY73QQkeINS5C4SA1bKb0HmXPatBg7xqdBDMdAlvasyZU0",
	"6OL6gidv8bZAQy7KShJK95PneSpibtEH18Ze4b7jJdcqR02iMoJaK91zDgu55alI2mQsTmEPx5AWcu1C",
	"Vq+o5TXGVOHrx23EkI3eViSY+FB68EbRV6qQyb+L/2XjTipiK2f/v4BfNqlzOF5uML55W6fHLgjCzP3z",
	"qcYVRPBJ0NZIUB8M3hmb2T0WrjXf2e+zijDD6/ItFylfilTQ7jBr7JxUfDO8qwci42u8KnTaP7Ihyk0U",
	"BPWKH6sscFtNYIRduVorLdKU+9f5esxurkWMPZvPnodh6MFK6YwTRLBKFScYkvmw4B6mfru7KqjuJc4d",
	"UvaqQjqGUnOyv3ow/efHQcoiW1ZejQ3o1W3BJR3G+3k4BpP42vS2XcAbfM9OtBZbnoIHL9AQO8c0RQ2X",
	"XkuSAeg+I4Z03XPk1HWfLvP+l4w5nvJeUR7PPHM4xn1+NKZhygmTq2Zm9fpAywnreRbOL0cZdNAJNG4F",
	"vu9b6ic4VllWN84W65d3sSWZJPZ1YeIUnzyZXBmfT6mMwjaunsfXaou1syntdnjTRxbbAyXxWhg6XhAH",
	"cuQhXeC1m4/S4USKzJX2Md6ZydOg6fqTyv9dnYGDcZhxcVCzxLXyiUt+w7/AO55nVd2OIbZZnRQWt3EY",
	"kj++//m3X3769cOH33/48c9vv5s6doVcqaHqOjlbOE1VR5idcX3jMS4ZPnWU1zEyIwit5iJBDkBnKzs5",
	"W4AHW9Smsred+aEfPp2H82f+bO7P5vYiKkfJcwERfOaH/gw8p9xcKIPYjnSI7ksPgrwdyGukIdi3SIWW",
	"hnGWCkNWKjbZr3UsJmy520sJi9mmzWmcRQIRvELqsNfhaDX0xThv2i1Bl9Tl5YFQnIfhoxTWBI72SmxE",
	"O52MxEFpp59NjrFYCUw60Sg9eFaB7JsZQkATdHSvOzebeG6vNp10K7KM610V+b2md6A7eYJmpF801QyX",
	"ZYcPwX07XMq/JUf1UMCEWcLbDiuUdGHhTVDiBslDBKkm/qMp0hmDH4MhB7pkhCOnY+HgS1VQ9531CG7w",
	"f8gNPokbzTNvudsvVQ+jIUH2SvDi0LnrKXVrah6wrs2U3tH+l3HJ10Ku96U0eFhCeVn+FQAA//9U1POE",
	"hA8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
