// Package check provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package check

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// CheckResponse defines model for CheckResponse.
type CheckResponse = []User

// Product defines model for Product.
type Product struct {
	Availability  *string   `json:"availability,omitempty"`
	ImageUrl      *string   `json:"image_url,omitempty"`
	Price         *int      `json:"price,omitempty"`
	ProductId     *int      `json:"product_id,omitempty"`
	ProductName   *string   `json:"product_name,omitempty"`
	Rating        *float32  `json:"rating,omitempty"`
	StockQuantity *int      `json:"stock_quantity,omitempty"`
	Tags          *[]string `json:"tags,omitempty"`
}

// ProductDetailResponse defines model for ProductDetailResponse.
type ProductDetailResponse struct {
	Availability       *string `json:"availability,omitempty"`
	ImageUrl           *string `json:"image_url,omitempty"`
	Price              *int    `json:"price,omitempty"`
	ProductDescription *string `json:"product_description,omitempty"`
	ProductId          *int    `json:"product_id,omitempty"`
	ProductName        *string `json:"product_name,omitempty"`
	RelatedProducts    *[]int  `json:"related_products,omitempty"`
	Reviews            *[]struct {
		Comment *string  `json:"comment,omitempty"`
		Rating  *float32 `json:"rating,omitempty"`
		User    *string  `json:"user,omitempty"`
	} `json:"reviews,omitempty"`
	StockQuantity *int `json:"stock_quantity,omitempty"`
}

// ProductListResponse defines model for ProductListResponse.
type ProductListResponse struct {
	CategoryId   *int       `json:"category_id,omitempty"`
	CategoryName *string    `json:"category_name,omitempty"`
	Products     *[]Product `json:"products,omitempty"`
}

// User defines model for User.
type User struct {
	Email    *string `json:"email,omitempty"`
	UserId   *int    `json:"user_id,omitempty"`
	UserName *string `json:"user_name,omitempty"`
}

// CategoryId defines model for category_id.
type CategoryId = int

// ProductId defines model for product_id.
type ProductId = int

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Error *string `json:"error,omitempty"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	Error *string `json:"error,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check API
	// (GET /check)
	CheckAPI(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CheckAPI operation middleware
func (siw *ServerInterfaceWrapper) CheckAPI(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckAPI(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/check", wrapper.CheckAPI)
}

type BadRequestJSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type NotFoundJSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type CheckAPIRequestObject struct {
}

type CheckAPIResponseObject interface {
	VisitCheckAPIResponse(w http.ResponseWriter) error
}

type CheckAPI200JSONResponse CheckResponse

func (response CheckAPI200JSONResponse) VisitCheckAPIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Check API
	// (GET /check)
	CheckAPI(ctx context.Context, request CheckAPIRequestObject) (CheckAPIResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CheckAPI operation middleware
func (sh *strictHandler) CheckAPI(ctx *gin.Context) {
	var request CheckAPIRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CheckAPI(ctx, request.(CheckAPIRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CheckAPI")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CheckAPIResponseObject); ok {
		if err := validResponse.VisitCheckAPIResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXUWvjRhD+K3vTPuok2b2D4qcml7YYrke49J5CCJPV2N5E2t3sjnwxwXDQ9z71J/Sp",
	"UOhj/09bSv9F2bVsWZYdfNAW+ibJszPfznwz8/kRpKms0aTZw+gRLDqsiMnFN4lMU+MW16oIrwV56ZRl",
	"ZTSM4NsZifGZMBPBMxJrU8FGTFTJ5IR1pqgl+xQSUOHEfU1uAQlorAhGHe8JOLqvlaMCRuxqSsDLGVUY",
	"wtIDVrYkGA0S4IUNR5VmmpKD5TKBJswRGBvLCJFYzkRBjKr0YmLcBqRFnrUYt5wfBzHfB3IZznprtKeY",
	"11Ms3tJ9TZ5jlo1m0vERrS2VxIA+u/XhCo9bUawzlhyrlRNyzrhOcBjrOZaqaIsxPoMNHM9O6WlMWfPF",
	"3NyS5BW+bt72OArZm6uCihSWCbwx/JWpdfHP4n+1DqcNi0n0/2/AX65LF3G8mpG8e9uUJ3xQTFX85VNH",
	"ExjBJ1nbI1lzMHvnQ2U3WNA5XIT38xVh+tfFOaoSb1SpeLFbNXHBRt7175qAqnBK17Uru0dmzNaPsqz5",
	"kkpTZdHUZ16FL9dT41RZYnprp/v8WqckdXy+eJnneQIT4ypkGMGkNMjQJ/Nuwz1N/dZ61VDbl7iISMXX",
	"K6T7UDrk8NSBmb48DFLX1c0qqg8Jvb6vUfNuvl/m+2AyTn3H7BLe0Htx4pyaYwkJnJJncUFlSQ6ukpYk",
	"PdBdRvTpuuHIWZw+28z7XzLmcMk7TXm48iLi2B/zP2MalchUXK93VmcOtJwIkQf58Govg3YmgaO5ovdd",
	"T90CS1NVzeBssX75IAPJNItvai9Levbs6M74/JjOqMPg6kR8bebUBDtm3PZv+pHN9kRLvFaeDzfEjhx5",
	"ShckrfFBOpxoVcXWPsQ7f/Q2WE/9o9r/XVOBnXVYodrpWUZnUkaNd/gFPaCtVn27D3Go6lFpiYb9lPz5",
	"wy+///rzbx8+/PHjT3999/2xa1fpiemrrpPzcdRUTYbFObq7RKAW9DxS3kkSXjEFzcWKI4AtU3FyPoYE",
	"5uT8yt98kOZp/nyYD1+kg2E6GIaLGEsarYIRfJbm6QCSqNxiKjMZVnp4mhL34V0wcu1F3PshVoRa0JxK",
	"Y0M/BlihMlHGjIugS4LpClVHxw3z/KME0FMU6sqQPaKmxbvGEIGfnQpptCYZzBpxU1cVusX2GVhvuEtY",
	"JecqGGZ2o1a23rLHdu4uw0+b9Xi5m0q55X+t6qP7ZXKQFBVqnCo93fw/6KltWF4t/w4AAP//9gpgZZkM",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
